{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\n\nvar AsapAction = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AsapAction, _super);\n\n  function AsapAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n\n    scheduler.actions.push(this);\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n  };\n\n  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n\n    return undefined;\n  };\n\n  return AsapAction;\n}(AsyncAction);\n\nexport { AsapAction };","map":{"version":3,"mappings":"AAAA;AACA,OAAO,KAAKA,OAAZ,MAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;;AACA,IAAIC,UAAU,GAAG,aAAe,UAAUC,MAAV,EAAkB;EAC9CJ,OAAO,CAACK,SAAR,CAAkBF,UAAlB,EAA8BC,MAA9B;;EACA,SAASD,UAAT,CAAoBG,SAApB,EAA+BC,IAA/B,EAAqC;IACjC,IAAIC,KAAK,GAAGJ,MAAM,CAACK,IAAP,CAAY,IAAZ,EAAkBH,SAAlB,EAA6BC,IAA7B,KAAsC,IAAlD;;IACAC,KAAK,CAACF,SAAN,GAAkBA,SAAlB;IACAE,KAAK,CAACD,IAAN,GAAaA,IAAb;IACA,OAAOC,KAAP;EACH;;EACDL,UAAU,CAACO,SAAX,CAAqBC,cAArB,GAAsC,UAAUL,SAAV,EAAqBM,EAArB,EAAyBC,KAAzB,EAAgC;IAClE,IAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;MAClBA,KAAK,GAAG,CAAR;IACH;;IACD,IAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,GAAG,CAA9B,EAAiC;MAC7B,OAAOT,MAAM,CAACM,SAAP,CAAiBC,cAAjB,CAAgCF,IAAhC,CAAqC,IAArC,EAA2CH,SAA3C,EAAsDM,EAAtD,EAA0DC,KAA1D,CAAP;IACH;;IACDP,SAAS,CAACQ,OAAV,CAAkBC,IAAlB,CAAuB,IAAvB;IACA,OAAOT,SAAS,CAACU,SAAV,KAAwBV,SAAS,CAACU,SAAV,GAAsBf,SAAS,CAACgB,YAAV,CAAuBX,SAAS,CAACY,KAAV,CAAgBC,IAAhB,CAAqBb,SAArB,EAAgC,IAAhC,CAAvB,CAA9C,CAAP;EACH,CATD;;EAUAH,UAAU,CAACO,SAAX,CAAqBU,cAArB,GAAsC,UAAUd,SAAV,EAAqBM,EAArB,EAAyBC,KAAzB,EAAgC;IAClE,IAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;MAClBA,KAAK,GAAG,CAAR;IACH;;IACD,IAAKA,KAAK,KAAK,IAAV,IAAkBA,KAAK,GAAG,CAA3B,IAAkCA,KAAK,KAAK,IAAV,IAAkB,KAAKA,KAAL,GAAa,CAArE,EAAyE;MACrE,OAAOT,MAAM,CAACM,SAAP,CAAiBU,cAAjB,CAAgCX,IAAhC,CAAqC,IAArC,EAA2CH,SAA3C,EAAsDM,EAAtD,EAA0DC,KAA1D,CAAP;IACH;;IACD,IAAIP,SAAS,CAACQ,OAAV,CAAkBO,MAAlB,KAA6B,CAAjC,EAAoC;MAChCpB,SAAS,CAACqB,cAAV,CAAyBV,EAAzB;MACAN,SAAS,CAACU,SAAV,GAAsBO,SAAtB;IACH;;IACD,OAAOA,SAAP;EACH,CAZD;;EAaA,OAAOpB,UAAP;AACH,CAhC+B,CAgC9BD,WAhC8B,CAAhC;;AAiCA,SAASC,UAAT","names":["tslib_1","Immediate","AsapAction","_super","scheduler","work","_this","delay","requestAsyncId","call","id","recycleAsyncId","undefined"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/scheduler/AsapAction.ts"],"sourcesContent":["import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}