{"ast":null,"code":"/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar nextHandle = 1;\n\nvar RESOLVED = /*@__PURE__*/function () {\n  return /*@__PURE__*/Promise.resolve();\n}();\n\nvar activeHandles = {};\n\nfunction findAndClearHandle(handle) {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n\n  return false;\n}\n\nexport var Immediate = {\n  setImmediate: function (cb) {\n    var handle = nextHandle++;\n    activeHandles[handle] = true;\n    RESOLVED.then(function () {\n      return findAndClearHandle(handle) && cb();\n    });\n    return handle;\n  },\n  clearImmediate: function (handle) {\n    findAndClearHandle(handle);\n  }\n};\nexport var TestTools = {\n  pending: function () {\n    return Object.keys(activeHandles).length;\n  }\n};","map":{"version":3,"mappings":"AAAA;AACA,IAAIA,UAAU,GAAG,CAAjB;;AACA,IAAIC,QAAQ,GAAG,aAAe,YAAY;EAAE,OAAO,aAAcC,OAAO,CAACC,OAAR,EAArB;AAAyC,CAAxD,EAA7B;;AACA,IAAIC,aAAa,GAAG,EAApB;;AACA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;EAChC,IAAIA,MAAM,IAAIF,aAAd,EAA6B;IACzB,OAAOA,aAAa,CAACE,MAAD,CAApB;IACA,OAAO,IAAP;EACH;;EACD,OAAO,KAAP;AACH;;AACD,OAAO,IAAIC,SAAS,GAAG;EACnBC,YAAY,EAAE,UAAUC,EAAV,EAAc;IACxB,IAAIH,MAAM,GAAGN,UAAU,EAAvB;IACAI,aAAa,CAACE,MAAD,CAAb,GAAwB,IAAxB;IACAL,QAAQ,CAACS,IAAT,CAAc,YAAY;MAAE,OAAOL,kBAAkB,CAACC,MAAD,CAAlB,IAA8BG,EAAE,EAAvC;IAA4C,CAAxE;IACA,OAAOH,MAAP;EACH,CANkB;EAOnBK,cAAc,EAAE,UAAUL,MAAV,EAAkB;IAC9BD,kBAAkB,CAACC,MAAD,CAAlB;EACH;AATkB,CAAhB;AAWP,OAAO,IAAIM,SAAS,GAAG;EACnBC,OAAO,EAAE,YAAY;IACjB,OAAOC,MAAM,CAACC,IAAP,CAAYX,aAAZ,EAA2BY,MAAlC;EACH;AAHkB,CAAhB","names":["nextHandle","RESOLVED","findAndClearHandle","handle","activeHandles","cb","TestTools"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/util/Immediate.ts"],"sourcesContent":["let nextHandle = 1;\nconst RESOLVED = (() => Promise.resolve())();\nconst activeHandles: { [key: number]: any } = {};\n\n/**\n * Finds the handle in the list of active handles, and removes it.\n * Returns `true` if found, `false` otherwise. Used both to clear\n * Immediate scheduled tasks, and to identify if a task should be scheduled.\n */\nfunction findAndClearHandle(handle: number): boolean {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n  return false;\n}\n\n/**\n * Helper functions to schedule and unschedule microtasks.\n */\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    activeHandles[handle] = true;\n    RESOLVED.then(() => findAndClearHandle(handle) && cb());\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    findAndClearHandle(handle);\n  },\n};\n\n/**\n * Used for internal testing purposes only. Do not export from library.\n */\nexport const TestTools = {\n  pending() {\n    return Object.keys(activeHandles).length;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}