{"ast":null,"code":"/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function subscribeToIterable(iterable) {\n  return function (subscriber) {\n    var iterator = iterable[Symbol_iterator]();\n\n    do {\n      var item = void 0;\n\n      try {\n        item = iterator.next();\n      } catch (err) {\n        subscriber.error(err);\n        return subscriber;\n      }\n\n      if (item.done) {\n        subscriber.complete();\n        break;\n      }\n\n      subscriber.next(item.value);\n\n      if (subscriber.closed) {\n        break;\n      }\n    } while (true);\n\n    if (typeof iterator.return === 'function') {\n      subscriber.add(function () {\n        if (iterator.return) {\n          iterator.return();\n        }\n      });\n    }\n\n    return subscriber;\n  };\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAQ,IAAIC,eAArB,QAA4C,oBAA5C;AACA,OAAO,IAAIC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAUC,QAAV,EAAoB;EACjD,OAAO,UAAUC,UAAV,EAAsB;IACzB,IAAIJ,QAAQ,GAAGG,QAAQ,CAACF,eAAD,CAAR,EAAf;;IACA,GAAG;MACC,IAAII,IAAI,GAAG,KAAK,CAAhB;;MACA,IAAI;QACAA,IAAI,GAAGL,QAAQ,CAACM,IAAT,EAAP;MACH,CAFD,CAGA,OAAOC,GAAP,EAAY;QACRH,UAAU,CAACI,KAAX,CAAiBD,GAAjB;QACA,OAAOH,UAAP;MACH;;MACD,IAAIC,IAAI,CAACI,IAAT,EAAe;QACXL,UAAU,CAACM,QAAX;QACA;MACH;;MACDN,UAAU,CAACE,IAAX,CAAgBD,IAAI,CAACM,KAArB;;MACA,IAAIP,UAAU,CAACQ,MAAf,EAAuB;QACnB;MACH;IACJ,CAjBD,QAiBS,IAjBT;;IAkBA,IAAI,OAAOZ,QAAQ,CAACa,MAAhB,KAA2B,UAA/B,EAA2C;MACvCT,UAAU,CAACU,GAAX,CAAe,YAAY;QACvB,IAAId,QAAQ,CAACa,MAAb,EAAqB;UACjBb,QAAQ,CAACa,MAAT;QACH;MACJ,CAJD;IAKH;;IACD,OAAOT,UAAP;EACH,CA5BD;AA6BH,CA9BM","names":["iterator","subscribeToIterable","iterable","item","err","subscriber"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/util/subscribeToIterable.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = (iterable as any)[Symbol_iterator]();\n\n  do {\n    let item: IteratorResult<T>;\n    try {\n      item = iterator.next();\n    } catch (err) {\n      subscriber.error(err);\n      return subscriber;\n    }\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n"]},"metadata":{},"sourceType":"module"}