{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return function (source) {\n    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n  };\n}\n\nvar GroupByOperator = /*@__PURE__*/function () {\n  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n\n  GroupByOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n  };\n\n  return GroupByOperator;\n}();\n\nvar GroupBySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupBySubscriber, _super);\n\n  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.keySelector = keySelector;\n    _this.elementSelector = elementSelector;\n    _this.durationSelector = durationSelector;\n    _this.subjectSelector = subjectSelector;\n    _this.groups = null;\n    _this.attemptedToUnsubscribe = false;\n    _this.count = 0;\n    return _this;\n  }\n\n  GroupBySubscriber.prototype._next = function (value) {\n    var key;\n\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  };\n\n  GroupBySubscriber.prototype._group = function (value, key) {\n    var groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map();\n    }\n\n    var group = groups.get(key);\n    var element;\n\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject();\n      groups.set(key, group);\n      var groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n\n      if (this.durationSelector) {\n        var duration = void 0;\n\n        try {\n          duration = this.durationSelector(new GroupedObservable(key, group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  };\n\n  GroupBySubscriber.prototype._error = function (err) {\n    var groups = this.groups;\n\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.error(err);\n      });\n      groups.clear();\n    }\n\n    this.destination.error(err);\n  };\n\n  GroupBySubscriber.prototype._complete = function () {\n    var groups = this.groups;\n\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.complete();\n      });\n      groups.clear();\n    }\n\n    this.destination.complete();\n  };\n\n  GroupBySubscriber.prototype.removeGroup = function (key) {\n    this.groups.delete(key);\n  };\n\n  GroupBySubscriber.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n\n      if (this.count === 0) {\n        _super.prototype.unsubscribe.call(this);\n      }\n    }\n  };\n\n  return GroupBySubscriber;\n}(Subscriber);\n\nvar GroupDurationSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupDurationSubscriber, _super);\n\n  function GroupDurationSubscriber(key, group, parent) {\n    var _this = _super.call(this, group) || this;\n\n    _this.key = key;\n    _this.group = group;\n    _this.parent = parent;\n    return _this;\n  }\n\n  GroupDurationSubscriber.prototype._next = function (value) {\n    this.complete();\n  };\n\n  GroupDurationSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        parent = _a.parent,\n        key = _a.key;\n\n    this.key = this.parent = null;\n\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  };\n\n  return GroupDurationSubscriber;\n}(Subscriber);\n\nvar GroupedObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(GroupedObservable, _super);\n\n  function GroupedObservable(key, groupSubject, refCountSubscription) {\n    var _this = _super.call(this) || this;\n\n    _this.key = key;\n    _this.groupSubject = groupSubject;\n    _this.refCountSubscription = refCountSubscription;\n    return _this;\n  }\n\n  GroupedObservable.prototype._subscribe = function (subscriber) {\n    var subscription = new Subscription();\n\n    var _a = this,\n        refCountSubscription = _a.refCountSubscription,\n        groupSubject = _a.groupSubject;\n\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  };\n\n  return GroupedObservable;\n}(Observable);\n\nexport { GroupedObservable };\n\nvar InnerRefCountSubscription = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(InnerRefCountSubscription, _super);\n\n  function InnerRefCountSubscription(parent) {\n    var _this = _super.call(this) || this;\n\n    _this.parent = parent;\n    parent.count++;\n    return _this;\n  }\n\n  InnerRefCountSubscription.prototype.unsubscribe = function () {\n    var parent = this.parent;\n\n    if (!parent.closed && !this.closed) {\n      _super.prototype.unsubscribe.call(this);\n\n      parent.count -= 1;\n\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  };\n\n  return InnerRefCountSubscription;\n}(Subscription);","map":{"version":3,"mappings":"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","names":["tslib_1","Subscriber","Subscription","Observable","Subject","groupBy","keySelector","elementSelector","durationSelector","subjectSelector","source","GroupByOperator","call","GroupBySubscriber","_super","destination","_this","key","err","_group","groups","group","element","groupedObservable","next","duration","_error","_complete","removeGroup","unsubscribe","closed","attemptedToUnsubscribe","GroupDurationSubscriber","parent","_a","GroupedObservable","refCountSubscription","_subscribe","subscriber","groupSubject","subscription","InnerRefCountSubscription","prototype","count"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/operators/groupBy.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * ![](groupBy.png)\n *\n * When the Observable emits an item, a key is computed for this item with the keySelector function.\n *\n * If a {@link GroupedObservable} for this key exists, this {@link GroupedObservable} emits. Elsewhere, a new\n * {@link GroupedObservable} for this key is created and emits.\n *\n * A {@link GroupedObservable} represents values belonging to the same group represented by a common key. The common\n * key is available as the key field of a {@link GroupedObservable} instance.\n *\n * The elements emitted by {@link GroupedObservable}s are by default the items emitted by the Observable, or elements\n * returned by the elementSelector function.\n *\n * ## Examples\n *\n * ### Group objects by id and return as array\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { mergeMap, groupBy, reduce } from 'rxjs/operators';\n *\n * of(\n *   {id: 1, name: 'JavaScript'},\n *   {id: 2, name: 'Parcel'},\n *   {id: 2, name: 'webpack'},\n *   {id: 1, name: 'TypeScript'},\n *   {id: 3, name: 'TSLint'}\n * ).pipe(\n *   groupBy(p => p.id),\n *   mergeMap((group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], []))),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'JavaScript'},\n * //   { id: 1, name: 'TypeScript'} ]\n * //\n * // [ { id: 2, name: 'Parcel'},\n * //   { id: 2, name: 'webpack'} ]\n * //\n * // [ { id: 3, name: 'TSLint'} ]\n * ```\n *\n * ### Pivot data on the id field\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { groupBy, map, mergeMap, reduce } from 'rxjs/operators';\n *\n * of(\n *   { id: 1, name: 'JavaScript' },\n *   { id: 2, name: 'Parcel' },\n *   { id: 2, name: 'webpack' },\n *   { id: 1, name: 'TypeScript' },\n *   { id: 3, name: 'TSLint' }\n * )\n *   .pipe(\n *     groupBy(p => p.id, p => p.name),\n *     mergeMap(group$ =>\n *       group$.pipe(reduce((acc, cur) => [...acc, cur], [`${group$.key}`]))\n *     ),\n *     map(arr => ({ id: parseInt(arr[0], 10), values: arr.slice(1) }))\n *  )\n *  .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'JavaScript', 'TypeScript' ] }\n * // { id: 2, values: [ 'Parcel', 'webpack' ] }\n * // { id: 3, values: [ 'TSLint' ] }\n * ```\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T | R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map<K, Subject<T | R>>();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = (this.subjectSelector ? this.subjectSelector() : new Subject<R>()) as Subject<T | R>;\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T | any>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  /** @deprecated Do not construct this type. Internal use only */\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const { refCountSubscription, groupSubject } = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}