{"ast":null,"code":"/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nvar Subscription = /*@__PURE__*/function () {\n  function Subscription(unsubscribe) {\n    this.closed = false;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n\n    if (unsubscribe) {\n      this._ctorUnsubscribe = true;\n      this._unsubscribe = unsubscribe;\n    }\n  }\n\n  Subscription.prototype.unsubscribe = function () {\n    var errors;\n\n    if (this.closed) {\n      return;\n    }\n\n    var _a = this,\n        _parentOrParents = _a._parentOrParents,\n        _ctorUnsubscribe = _a._ctorUnsubscribe,\n        _unsubscribe = _a._unsubscribe,\n        _subscriptions = _a._subscriptions;\n\n    this.closed = true;\n    this._parentOrParents = null;\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (var index = 0; index < _parentOrParents.length; ++index) {\n        var parent_1 = _parentOrParents[index];\n        parent_1.remove(this);\n      }\n    }\n\n    if (isFunction(_unsubscribe)) {\n      if (_ctorUnsubscribe) {\n        this._unsubscribe = undefined;\n      }\n\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n      var index = -1;\n      var len = _subscriptions.length;\n\n      while (++index < len) {\n        var sub = _subscriptions[index];\n\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  };\n\n  Subscription.prototype.add = function (teardown) {\n    var subscription = teardown;\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(teardown);\n\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          var tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n\n        break;\n\n      default:\n        {\n          throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n    }\n\n    var _parentOrParents = subscription._parentOrParents;\n\n    if (_parentOrParents === null) {\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        return subscription;\n      }\n\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      _parentOrParents.push(this);\n    } else {\n      return subscription;\n    }\n\n    var subscriptions = this._subscriptions;\n\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  };\n\n  Subscription.prototype.remove = function (subscription) {\n    var subscriptions = this._subscriptions;\n\n    if (subscriptions) {\n      var subscriptionIndex = subscriptions.indexOf(subscription);\n\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  };\n\n  Subscription.EMPTY = function (empty) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription());\n\n  return Subscription;\n}();\n\nexport { Subscription };\n\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce(function (errs, err) {\n    return errs.concat(err instanceof UnsubscriptionError ? err.errors : err);\n  }, []);\n}","map":{"version":3,"mappings":"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","names":["isArray","isObject","isFunction","Subscription","unsubscribe","_subscriptions","_ctorUnsubscribe","errors","_a","_parentOrParents","_unsubscribe","closed","index","parent_1","e","len","sub","UnsubscriptionError","add","teardown","subscription","indexOf","subscriptions","remove","subscriptionIndex","empty","flattenUnsubscriptionErrors"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/Subscription.ts"],"sourcesContent":["import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parentOrParents: Subscription | Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (this as any)._ctorUnsubscribe = true;\n      (this as any)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parentOrParents, _ctorUnsubscribe, _unsubscribe, _subscriptions } = (this as any);\n\n    this.closed = true;\n    this._parentOrParents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (let index = 0; index < _parentOrParents.length; ++index) {\n        const parent = _parentOrParents[index];\n        parent.remove(this);\n      }\n    }\n\n    if (isFunction(_unsubscribe)) {\n      // It's only possible to null _unsubscribe - to release the reference to\n      // any teardown function passed in the constructor - if the property was\n      // actually assigned in the constructor, as there are some classes that\n      // are derived from Subscriber (which derives from Subscription) that\n      // implement an _unsubscribe method as a mechanism for obtaining\n      // unsubscription notifications and some of those subscribers are\n      // recycled. Also, in some of those subscribers, _unsubscribe switches\n      // from a prototype method to an instance property - see notifyNext in\n      // RetryWhenSubscriber.\n      if (_ctorUnsubscribe) {\n        (this as any)._unsubscribe = undefined;\n      }\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n      let index = -1;\n      let len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription. Can also be used to add a child subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    let subscription = (<Subscription>teardown);\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void)>teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          // This also covers the case where `subscription` is `Subscription.EMPTY`, which is always in `closed` state.\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default: {\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n    }\n\n    // Add `this` as parent of `subscription` if that's not already the case.\n    let { _parentOrParents } = subscription;\n    if (_parentOrParents === null) {\n      // If we don't have a parent, then set `subscription._parents` to\n      // the `this`, which is the common case that we optimize for.\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        // The `subscription` already has `this` as a parent.\n        return subscription;\n      }\n      // If there's already one parent, but not multiple, allocate an\n      // Array to store the rest of the parent Subscriptions.\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      // Only add `this` to the _parentOrParents list if it's not already there.\n      _parentOrParents.push(this);\n    } else {\n      // The `subscription` already has `this` as a parent.\n      return subscription;\n    }\n\n    // Optimize for the common case when adding the first subscription.\n    const subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n"]},"metadata":{},"sourceType":"module"}