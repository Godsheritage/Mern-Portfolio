{"ast":null,"code":"import { useRef, useEffect, forwardRef, useState, useImperativeHandle, createElement } from 'react';\n\nconst noop = () => {};\n\nfunction useInterval(callback, delay, immediate) {\n  const savedCallback = useRef(noop);\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    if (!immediate) return;\n    if (delay === null || delay === false) return;\n    savedCallback.current();\n  }, [immediate]);\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined;\n\n    const tick = () => savedCallback.current();\n\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst LoadingBar = forwardRef((_ref, ref) => {\n  let {\n    progress,\n    height: _height = 2,\n    className: _className = '',\n    color: _color = 'red',\n    background: _background = 'transparent',\n    onLoaderFinished,\n    transitionTime: _transitionTime = 300,\n    loaderSpeed: _loaderSpeed = 500,\n    waitingTime: _waitingTime = 1000,\n    shadow: _shadow = true,\n    containerStyle: _containerStyle = {},\n    style: _style = {},\n    shadowStyle: shadowStyleProp = {},\n    containerClassName: _containerClassName = ''\n  } = _ref;\n  const isMounted = useRef(false);\n  const [localProgress, localProgressSet] = useState(0);\n  const [pressedContinuous, setPressedContinuous] = useState({\n    active: false,\n    startingValue: 20,\n    refreshRate: 1000\n  });\n  const [usingProps, setUsingProps] = useState(false);\n  const [pressedStaticStart, setStaticStartPressed] = useState({\n    active: false,\n    value: 20\n  });\n  const initialLoaderStyle = {\n    height: '100%',\n    background: _color,\n    transition: `all ${_loaderSpeed}ms ease`,\n    width: '0%'\n  };\n  const loaderContainerStyle = {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    height: _height,\n    background: _background,\n    zIndex: 99999999999,\n    width: 100 + '%'\n  };\n  const initialShadowStyles = {\n    boxShadow: `0 0 10px ${_color}, 0 0 10px ${_color}`,\n    width: '5%',\n    opacity: 1,\n    position: 'absolute',\n    height: '100%',\n    transition: `all ${_loaderSpeed}ms ease`,\n    transform: 'rotate(3deg) translate(0px, -4px)',\n    left: '-10rem'\n  };\n  const [loaderStyle, loaderStyleSet] = useState(initialLoaderStyle);\n  const [shadowStyle, shadowStyleSet] = useState(initialShadowStyles);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  useImperativeHandle(ref, () => ({\n    continuousStart(startingValue) {\n      let refreshRate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n      if (pressedStaticStart.active) return;\n\n      if (usingProps) {\n        console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n        return;\n      }\n\n      const val = startingValue || randomInt(10, 20);\n      setPressedContinuous({\n        active: true,\n        refreshRate,\n        startingValue\n      });\n      localProgressSet(val);\n      checkIfFull(val);\n    },\n\n    staticStart(startingValue) {\n      if (pressedContinuous.active) return;\n\n      if (usingProps) {\n        console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n        return;\n      }\n\n      const val = startingValue || randomInt(30, 50);\n      setStaticStartPressed({\n        active: true,\n        value: val\n      });\n      localProgressSet(val);\n      checkIfFull(val);\n    },\n\n    complete() {\n      if (usingProps) {\n        console.warn(\"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\");\n        return;\n      }\n\n      localProgressSet(100);\n      checkIfFull(100);\n    }\n\n  }));\n  useEffect(() => {\n    loaderStyleSet({ ...loaderStyle,\n      background: _color\n    });\n    shadowStyleSet({ ...shadowStyle,\n      boxShadow: `0 0 10px ${_color}, 0 0 5px ${_color}`\n    });\n  }, [_color]);\n  useEffect(() => {\n    if (ref) {\n      if (ref && progress !== undefined) {\n        console.warn('react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.');\n        return;\n      }\n\n      checkIfFull(localProgress);\n      setUsingProps(false);\n    } else {\n      if (progress) checkIfFull(progress);\n      setUsingProps(true);\n    }\n  }, [progress]);\n\n  const checkIfFull = _progress => {\n    if (_progress >= 100) {\n      loaderStyleSet({ ...loaderStyle,\n        width: '100%'\n      });\n\n      if (_shadow) {\n        shadowStyleSet({ ...shadowStyle,\n          left: _progress - 10 + '%'\n        });\n      }\n\n      setTimeout(() => {\n        if (!isMounted.current) {\n          return;\n        }\n\n        loaderStyleSet({ ...loaderStyle,\n          opacity: 0,\n          width: '100%',\n          transition: `all ${_transitionTime}ms ease-out`,\n          color: _color\n        });\n        setTimeout(() => {\n          if (!isMounted.current) {\n            return;\n          }\n\n          if (pressedContinuous.active) {\n            setPressedContinuous({ ...pressedContinuous,\n              active: false\n            });\n            localProgressSet(0);\n            checkIfFull(0);\n          }\n\n          if (pressedStaticStart.active) {\n            setStaticStartPressed({ ...pressedStaticStart,\n              active: false\n            });\n            localProgressSet(0);\n            checkIfFull(0);\n          }\n\n          if (onLoaderFinished) onLoaderFinished();\n          localProgressSet(0);\n          checkIfFull(0);\n        }, _transitionTime);\n      }, _waitingTime);\n    } else {\n      loaderStyleSet(_loaderStyle => {\n        return { ..._loaderStyle,\n          width: _progress + '%',\n          opacity: 1,\n          transition: _progress > 0 ? `all ${_loaderSpeed}ms ease` : ''\n        };\n      });\n\n      if (_shadow) {\n        shadowStyleSet({ ...shadowStyle,\n          left: _progress - 5.5 + '%',\n          transition: _progress > 0 ? `all ${_loaderSpeed}ms ease` : ''\n        });\n      }\n    }\n  };\n\n  useInterval(() => {\n    const random = randomInt(10, 20);\n\n    if (localProgress + random < 90) {\n      localProgressSet(localProgress + random);\n      checkIfFull(localProgress + random);\n    }\n  }, pressedContinuous.active ? pressedContinuous.refreshRate : null);\n  return createElement(\"div\", {\n    className: _containerClassName,\n    style: { ...loaderContainerStyle,\n      ..._containerStyle\n    }\n  }, createElement(\"div\", {\n    className: _className,\n    style: { ...loaderStyle,\n      ..._style\n    }\n  }, _shadow ? createElement(\"div\", {\n    style: { ...shadowStyle,\n      ...shadowStyleProp\n    }\n  }) : null));\n});\nexport default LoadingBar;","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,EAAwCC,QAAxC,EAAkDC,mBAAlD,EAAuEC,aAAvE,QAA4F,OAA5F;;AAEA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsCC,SAAtC,EAAiD;EAC/C,MAAMC,aAAa,GAAGX,MAAM,CAACM,IAAD,CAA5B;EACAL,SAAS,CAAC,MAAM;IACdU,aAAa,CAACC,OAAd,GAAwBJ,QAAxB;EACD,CAFQ,CAAT;EAGAP,SAAS,CAAC,MAAM;IACd,IAAI,CAACS,SAAL,EAAgB;IAChB,IAAID,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAhC,EAAuC;IACvCE,aAAa,CAACC,OAAd;EACD,CAJQ,EAIN,CAACF,SAAD,CAJM,CAAT;EAKAT,SAAS,CAAC,MAAM;IACd,IAAIQ,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAhC,EAAuC,OAAOI,SAAP;;IAEvC,MAAMC,IAAI,GAAG,MAAMH,aAAa,CAACC,OAAd,EAAnB;;IAEA,MAAMG,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOL,KAAP,CAAtB;IACA,OAAO,MAAMQ,aAAa,CAACF,EAAD,CAA1B;EACD,CAPQ,EAON,CAACN,KAAD,CAPM,CAAT;AAQD;;AAED,SAASS,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6B;EAC3B,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;;AAED,MAAMK,UAAU,GAAGtB,UAAU,CAAC,OAe3BuB,GAf2B,KAenB;EAAA,IAfoB;IAC7BC,QAD6B;IAE7BC,MAAM,EAAEC,OAAO,GAAG,CAFW;IAG7BC,SAAS,EAAEC,UAAU,GAAG,EAHK;IAI7BC,KAAK,EAAEC,MAAM,GAAG,KAJa;IAK7BC,UAAU,EAAEC,WAAW,GAAG,aALG;IAM7BC,gBAN6B;IAO7BC,cAAc,EAAEC,eAAe,GAAG,GAPL;IAQ7BC,WAAW,EAAEC,YAAY,GAAG,GARC;IAS7BC,WAAW,EAAEC,YAAY,GAAG,IATC;IAU7BC,MAAM,EAAEC,OAAO,GAAG,IAVW;IAW7BC,cAAc,EAAEC,eAAe,GAAG,EAXL;IAY7BC,KAAK,EAAEC,MAAM,GAAG,EAZa;IAa7BC,WAAW,EAAEC,eAAe,GAAG,EAbF;IAc7BC,kBAAkB,EAAEC,mBAAmB,GAAG;EAdb,CAepB;EACT,MAAMC,SAAS,GAAGpD,MAAM,CAAC,KAAD,CAAxB;EACA,MAAM,CAACqD,aAAD,EAAgBC,gBAAhB,IAAoCnD,QAAQ,CAAC,CAAD,CAAlD;EACA,MAAM,CAACoD,iBAAD,EAAoBC,oBAApB,IAA4CrD,QAAQ,CAAC;IACzDsD,MAAM,EAAE,KADiD;IAEzDC,aAAa,EAAE,EAF0C;IAGzDC,WAAW,EAAE;EAH4C,CAAD,CAA1D;EAKA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B1D,QAAQ,CAAC,KAAD,CAA5C;EACA,MAAM,CAAC2D,kBAAD,EAAqBC,qBAArB,IAA8C5D,QAAQ,CAAC;IAC3DsD,MAAM,EAAE,KADmD;IAE3DO,KAAK,EAAE;EAFoD,CAAD,CAA5D;EAIA,MAAMC,kBAAkB,GAAG;IACzBtC,MAAM,EAAE,MADiB;IAEzBM,UAAU,EAAED,MAFa;IAGzBkC,UAAU,EAAG,OAAM3B,YAAa,SAHP;IAIzB4B,KAAK,EAAE;EAJkB,CAA3B;EAMA,MAAMC,oBAAoB,GAAG;IAC3BC,QAAQ,EAAE,OADiB;IAE3BC,GAAG,EAAE,CAFsB;IAG3BC,IAAI,EAAE,CAHqB;IAI3B5C,MAAM,EAAEC,OAJmB;IAK3BK,UAAU,EAAEC,WALe;IAM3BsC,MAAM,EAAE,WANmB;IAO3BL,KAAK,EAAE,MAAM;EAPc,CAA7B;EASA,MAAMM,mBAAmB,GAAG;IAC1BC,SAAS,EAAG,YAAW1C,MAAO,cAAaA,MAAO,EADxB;IAE1BmC,KAAK,EAAE,IAFmB;IAG1BQ,OAAO,EAAE,CAHiB;IAI1BN,QAAQ,EAAE,UAJgB;IAK1B1C,MAAM,EAAE,MALkB;IAM1BuC,UAAU,EAAG,OAAM3B,YAAa,SANN;IAO1BqC,SAAS,EAAE,mCAPe;IAQ1BL,IAAI,EAAE;EARoB,CAA5B;EAUA,MAAM,CAACM,WAAD,EAAcC,cAAd,IAAgC3E,QAAQ,CAAC8D,kBAAD,CAA9C;EACA,MAAM,CAACjB,WAAD,EAAc+B,cAAd,IAAgC5E,QAAQ,CAACsE,mBAAD,CAA9C;EACAxE,SAAS,CAAC,MAAM;IACdmD,SAAS,CAACxC,OAAV,GAAoB,IAApB;IACA,OAAO,MAAM;MACXwC,SAAS,CAACxC,OAAV,GAAoB,KAApB;IACD,CAFD;EAGD,CALQ,EAKN,EALM,CAAT;EAMAR,mBAAmB,CAACqB,GAAD,EAAM,OAAO;IAC9BuD,eAAe,CAACtB,aAAD,EAAoC;MAAA,IAApBC,WAAoB,uEAAN,IAAM;MACjD,IAAIG,kBAAkB,CAACL,MAAvB,EAA+B;;MAE/B,IAAIG,UAAJ,EAAgB;QACdqB,OAAO,CAACC,IAAR,CAAa,oGAAb;QACA;MACD;;MAED,MAAMC,GAAG,GAAGzB,aAAa,IAAIxC,SAAS,CAAC,EAAD,EAAK,EAAL,CAAtC;MACAsC,oBAAoB,CAAC;QACnBC,MAAM,EAAE,IADW;QAEnBE,WAFmB;QAGnBD;MAHmB,CAAD,CAApB;MAKAJ,gBAAgB,CAAC6B,GAAD,CAAhB;MACAC,WAAW,CAACD,GAAD,CAAX;IACD,CAjB6B;;IAmB9BE,WAAW,CAAC3B,aAAD,EAAgB;MACzB,IAAIH,iBAAiB,CAACE,MAAtB,EAA8B;;MAE9B,IAAIG,UAAJ,EAAgB;QACdqB,OAAO,CAACC,IAAR,CAAa,oGAAb;QACA;MACD;;MAED,MAAMC,GAAG,GAAGzB,aAAa,IAAIxC,SAAS,CAAC,EAAD,EAAK,EAAL,CAAtC;MACA6C,qBAAqB,CAAC;QACpBN,MAAM,EAAE,IADY;QAEpBO,KAAK,EAAEmB;MAFa,CAAD,CAArB;MAIA7B,gBAAgB,CAAC6B,GAAD,CAAhB;MACAC,WAAW,CAACD,GAAD,CAAX;IACD,CAlC6B;;IAoC9BG,QAAQ,GAAG;MACT,IAAI1B,UAAJ,EAAgB;QACdqB,OAAO,CAACC,IAAR,CAAa,oGAAb;QACA;MACD;;MAED5B,gBAAgB,CAAC,GAAD,CAAhB;MACA8B,WAAW,CAAC,GAAD,CAAX;IACD;;EA5C6B,CAAP,CAAN,CAAnB;EA+CAnF,SAAS,CAAC,MAAM;IACd6E,cAAc,CAAC,EAAE,GAAGD,WAAL;MACb5C,UAAU,EAAED;IADC,CAAD,CAAd;IAGA+C,cAAc,CAAC,EAAE,GAAG/B,WAAL;MACb0B,SAAS,EAAG,YAAW1C,MAAO,aAAYA,MAAO;IADpC,CAAD,CAAd;EAGD,CAPQ,EAON,CAACA,MAAD,CAPM,CAAT;EAQA/B,SAAS,CAAC,MAAM;IACd,IAAIwB,GAAJ,EAAS;MACP,IAAIA,GAAG,IAAIC,QAAQ,KAAKb,SAAxB,EAAmC;QACjCoE,OAAO,CAACC,IAAR,CAAa,gNAAb;QACA;MACD;;MAEDE,WAAW,CAAC/B,aAAD,CAAX;MACAQ,aAAa,CAAC,KAAD,CAAb;IACD,CARD,MAQO;MACL,IAAInC,QAAJ,EAAc0D,WAAW,CAAC1D,QAAD,CAAX;MACdmC,aAAa,CAAC,IAAD,CAAb;IACD;EACF,CAbQ,EAaN,CAACnC,QAAD,CAbM,CAAT;;EAeA,MAAM0D,WAAW,GAAGG,SAAS,IAAI;IAC/B,IAAIA,SAAS,IAAI,GAAjB,EAAsB;MACpBT,cAAc,CAAC,EAAE,GAAGD,WAAL;QACbV,KAAK,EAAE;MADM,CAAD,CAAd;;MAIA,IAAIxB,OAAJ,EAAa;QACXoC,cAAc,CAAC,EAAE,GAAG/B,WAAL;UACbuB,IAAI,EAAEgB,SAAS,GAAG,EAAZ,GAAiB;QADV,CAAD,CAAd;MAGD;;MAEDC,UAAU,CAAC,MAAM;QACf,IAAI,CAACpC,SAAS,CAACxC,OAAf,EAAwB;UACtB;QACD;;QAEDkE,cAAc,CAAC,EAAE,GAAGD,WAAL;UACbF,OAAO,EAAE,CADI;UAEbR,KAAK,EAAE,MAFM;UAGbD,UAAU,EAAG,OAAM7B,eAAgB,aAHtB;UAIbN,KAAK,EAAEC;QAJM,CAAD,CAAd;QAMAwD,UAAU,CAAC,MAAM;UACf,IAAI,CAACpC,SAAS,CAACxC,OAAf,EAAwB;YACtB;UACD;;UAED,IAAI2C,iBAAiB,CAACE,MAAtB,EAA8B;YAC5BD,oBAAoB,CAAC,EAAE,GAAGD,iBAAL;cACnBE,MAAM,EAAE;YADW,CAAD,CAApB;YAGAH,gBAAgB,CAAC,CAAD,CAAhB;YACA8B,WAAW,CAAC,CAAD,CAAX;UACD;;UAED,IAAItB,kBAAkB,CAACL,MAAvB,EAA+B;YAC7BM,qBAAqB,CAAC,EAAE,GAAGD,kBAAL;cACpBL,MAAM,EAAE;YADY,CAAD,CAArB;YAGAH,gBAAgB,CAAC,CAAD,CAAhB;YACA8B,WAAW,CAAC,CAAD,CAAX;UACD;;UAED,IAAIjD,gBAAJ,EAAsBA,gBAAgB;UACtCmB,gBAAgB,CAAC,CAAD,CAAhB;UACA8B,WAAW,CAAC,CAAD,CAAX;QACD,CAxBS,EAwBP/C,eAxBO,CAAV;MAyBD,CApCS,EAoCPI,YApCO,CAAV;IAqCD,CAhDD,MAgDO;MACLqC,cAAc,CAACW,YAAY,IAAI;QAC7B,OAAO,EAAE,GAAGA,YAAL;UACLtB,KAAK,EAAEoB,SAAS,GAAG,GADd;UAELZ,OAAO,EAAE,CAFJ;UAGLT,UAAU,EAAEqB,SAAS,GAAG,CAAZ,GAAiB,OAAMhD,YAAa,SAApC,GAA+C;QAHtD,CAAP;MAKD,CANa,CAAd;;MAQA,IAAII,OAAJ,EAAa;QACXoC,cAAc,CAAC,EAAE,GAAG/B,WAAL;UACbuB,IAAI,EAAEgB,SAAS,GAAG,GAAZ,GAAkB,GADX;UAEbrB,UAAU,EAAEqB,SAAS,GAAG,CAAZ,GAAiB,OAAMhD,YAAa,SAApC,GAA+C;QAF9C,CAAD,CAAd;MAID;IACF;EACF,CAjED;;EAmEAhC,WAAW,CAAC,MAAM;IAChB,MAAMgB,MAAM,GAAGL,SAAS,CAAC,EAAD,EAAK,EAAL,CAAxB;;IAEA,IAAImC,aAAa,GAAG9B,MAAhB,GAAyB,EAA7B,EAAiC;MAC/B+B,gBAAgB,CAACD,aAAa,GAAG9B,MAAjB,CAAhB;MACA6D,WAAW,CAAC/B,aAAa,GAAG9B,MAAjB,CAAX;IACD;EACF,CAPU,EAORgC,iBAAiB,CAACE,MAAlB,GAA2BF,iBAAiB,CAACI,WAA7C,GAA2D,IAPnD,CAAX;EAQA,OAAOtD,aAAa,CAAC,KAAD,EAAQ;IAC1BwB,SAAS,EAAEsB,mBADe;IAE1BL,KAAK,EAAE,EAAE,GAAGsB,oBAAL;MACL,GAAGvB;IADE;EAFmB,CAAR,EAKjBxC,aAAa,CAAC,KAAD,EAAQ;IACtBwB,SAAS,EAAEC,UADW;IAEtBgB,KAAK,EAAE,EAAE,GAAG+B,WAAL;MACL,GAAG9B;IADE;EAFe,CAAR,EAKbJ,OAAO,GAAGtC,aAAa,CAAC,KAAD,EAAQ;IAChCyC,KAAK,EAAE,EAAE,GAAGE,WAAL;MACL,GAAGC;IADE;EADyB,CAAR,CAAhB,GAIL,IATW,CALI,CAApB;AAeD,CA7N4B,CAA7B;AA+NA,eAAezB,UAAf","names":["noop","useInterval","callback","delay","immediate","savedCallback","useRef","useEffect","current","undefined","tick","id","setInterval","clearInterval","randomInt","min","max","Math","floor","random","LoadingBar","forwardRef","ref","progress","height","className","color","background","onLoaderFinished","transitionTime","loaderSpeed","waitingTime","shadow","containerStyle","style","shadowStyle","shadowStyleProp","containerClassName","isMounted","localProgress","localProgressSet","useState","pressedContinuous","setPressedContinuous","active","startingValue","refreshRate","usingProps","setUsingProps","pressedStaticStart","setStaticStartPressed","value","initialLoaderStyle","transition","width","loaderContainerStyle","position","top","left","zIndex","initialShadowStyles","boxShadow","opacity","transform","loaderStyle","loaderStyleSet","shadowStyleSet","useImperativeHandle","continuousStart","console","warn","val","checkIfFull","staticStart","complete","_progress","setTimeout","_loaderStyle","React"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/react-top-loading-bar/src/useInterval.ts","/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/react-top-loading-bar/src/utils.ts","/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/react-top-loading-bar/src/index.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\n/** keep typescript happy */\nconst noop = () => {}\n\nexport function useInterval(\n  callback: () => void,\n  delay: number | null | false,\n  immediate?: boolean\n) {\n  const savedCallback = useRef(noop)\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  // Execute callback if immediate is set.\n  useEffect(() => {\n    if (!immediate) return\n    if (delay === null || delay === false) return\n    savedCallback.current()\n  }, [immediate])\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined\n    const tick = () => savedCallback.current()\n    const id = setInterval(tick, delay)\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval\n","export function randomInt(min: number, max: number): number {\n  // @ts-ignore\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n","import * as React from 'react'\nimport {\n  CSSProperties,\n  useEffect,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n} from 'react'\nimport { useInterval } from './useInterval'\nimport { randomInt } from './utils'\n\ntype IProps = {\n  progress?: number\n  color?: string\n  shadow?: boolean\n  background?: string\n  height?: number\n  onLoaderFinished?: () => void\n  className?: string\n  containerClassName?: string\n  loaderSpeed?: number\n  transitionTime?: number\n  waitingTime?: number\n  style?: CSSProperties\n  containerStyle?: CSSProperties\n  shadowStyle?: CSSProperties\n}\n\nexport type LoadingBarRef = {\n  continuousStart: (startingValue: number, refreshRate: number) => void\n  staticStart: (startingValue: number) => void\n  complete: () => void;\n}\n\nconst LoadingBar = forwardRef<LoadingBarRef, IProps>(\n  (\n    {\n      progress,\n      height = 2,\n      className = '',\n      color = 'red',\n      background = 'transparent',\n      onLoaderFinished,\n      transitionTime = 300,\n      loaderSpeed = 500,\n      waitingTime = 1000,\n      shadow = true,\n      containerStyle = {},\n      style = {},\n      shadowStyle: shadowStyleProp = {},\n      containerClassName = ''\n    },\n    ref\n  ) => {\n    const isMounted = useRef(false);\n    const [localProgress, localProgressSet] = useState<number>(0)\n    const [pressedContinuous, setPressedContinuous] = useState<{\n      active: boolean\n      startingValue: number\n      refreshRate: number\n    }>({ active: false, startingValue: 20, refreshRate: 1000 })\n    const [usingProps, setUsingProps] = useState(false)\n\n    const [pressedStaticStart, setStaticStartPressed] = useState<{\n      active: boolean\n      value: number\n    }>({ active: false, value: 20 })\n\n    const initialLoaderStyle: CSSProperties = {\n      height: '100%',\n      background: color,\n      transition: `all ${loaderSpeed}ms ease`,\n      width: '0%',\n    }\n\n    const loaderContainerStyle: CSSProperties = {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      height,\n      background,\n      zIndex: 99999999999,\n      width: 100 + '%',\n    }\n\n    const initialShadowStyles: CSSProperties = {\n      boxShadow: `0 0 10px ${color}, 0 0 10px ${color}`,\n      width: '5%',\n      opacity: 1,\n      position: 'absolute',\n      height: '100%',\n      transition: `all ${loaderSpeed}ms ease`,\n      transform: 'rotate(3deg) translate(0px, -4px)',\n      left: '-10rem',\n    }\n\n    const [loaderStyle, loaderStyleSet] = useState<CSSProperties>(\n      initialLoaderStyle\n    )\n    const [shadowStyle, shadowStyleSet] = useState<CSSProperties>(\n      initialShadowStyles\n    )\n\n    useEffect(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      }\n    }, []);\n\n    useImperativeHandle(ref, () => ({\n      continuousStart(startingValue: number, refreshRate: number = 1000) {\n        if (pressedStaticStart.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(10, 20)\n        setPressedContinuous({\n          active: true,\n          refreshRate,\n          startingValue,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      staticStart(startingValue: number) {\n        if (pressedContinuous.active) return\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n\n        const val = startingValue || randomInt(30, 50)\n        setStaticStartPressed({\n          active: true,\n          value: val,\n        })\n        localProgressSet(val)\n        checkIfFull(val)\n      },\n      complete() {\n        if (usingProps) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\"\n          )\n          return\n        }\n        localProgressSet(100)\n        checkIfFull(100)\n      },\n    }))\n\n    useEffect(() => {\n      loaderStyleSet({\n        ...loaderStyle,\n        background: color,\n      })\n\n      shadowStyleSet({\n        ...shadowStyle,\n        boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n      })\n    }, [color])\n\n    useEffect(() => {\n      if (ref) {\n        if (ref && progress !== undefined) {\n          console.warn(\n            'react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.'\n          )\n          return\n        }\n        checkIfFull(localProgress)\n        setUsingProps(false)\n      } else {\n        if (progress) checkIfFull(progress)\n\n        setUsingProps(true)\n      }\n    }, [progress])\n\n    const checkIfFull = (_progress: number) => {\n      if (_progress >= 100) {\n        // now it should wait a little bit\n        loaderStyleSet({\n          ...loaderStyle,\n          width: '100%',\n        })\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 10 + '%',\n          })\n        }\n\n        setTimeout(() => {\n          if (!isMounted.current) {\n            return;\n          }\n          // now it can fade out\n          loaderStyleSet({\n            ...loaderStyle,\n            opacity: 0,\n            width: '100%',\n            transition: `all ${transitionTime}ms ease-out`,\n            color: color,\n          })\n\n          setTimeout(() => {\n            if (!isMounted.current) {\n              return;\n            }\n            // here we wait for it to fade\n            if (pressedContinuous.active) {\n              // if we have continous loader just ending, we kill it and reset it\n              setPressedContinuous({\n                ...pressedContinuous,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (pressedStaticStart.active) {\n              setStaticStartPressed({\n                ...pressedStaticStart,\n                active: false,\n              })\n              localProgressSet(0)\n              checkIfFull(0)\n            }\n\n            if (onLoaderFinished) onLoaderFinished()\n            localProgressSet(0)\n            checkIfFull(0)\n          }, transitionTime)\n        }, waitingTime)\n      } else {\n        loaderStyleSet((_loaderStyle) => {\n          return {\n            ..._loaderStyle,\n            width: _progress + '%',\n            opacity: 1,\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          }\n        })\n\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 5.5 + '%',\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : '',\n          })\n        }\n      }\n    }\n\n    useInterval(\n      () => {\n        const random = randomInt(10, 20)\n\n        if (localProgress + random < 90) {\n          localProgressSet(localProgress + random)\n          checkIfFull(localProgress + random)\n        }\n      },\n      pressedContinuous.active ? pressedContinuous.refreshRate : null\n    )\n\n    return (\n      <div className={containerClassName} style={{...loaderContainerStyle, ...containerStyle}}>\n        <div className={className} style={{...loaderStyle, ...style}}>\n          {shadow ? <div style={{...shadowStyle, ...shadowStyleProp}} /> : null}\n        </div>\n      </div>\n    )\n  }\n)\n\nexport {\n  IProps,\n}\n\nexport default LoadingBar\n"]},"metadata":{},"sourceType":"module"}