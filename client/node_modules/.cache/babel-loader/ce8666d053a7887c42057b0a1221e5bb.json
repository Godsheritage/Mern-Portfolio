{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function observeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  return function observeOnOperatorFunction(source) {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nvar ObserveOnOperator = /*@__PURE__*/function () {\n  function ObserveOnOperator(scheduler, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n\n  ObserveOnOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  };\n\n  return ObserveOnOperator;\n}();\n\nexport { ObserveOnOperator };\n\nvar ObserveOnSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ObserveOnSubscriber, _super);\n\n  function ObserveOnSubscriber(destination, scheduler, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    var _this = _super.call(this, destination) || this;\n\n    _this.scheduler = scheduler;\n    _this.delay = delay;\n    return _this;\n  }\n\n  ObserveOnSubscriber.dispatch = function (arg) {\n    var notification = arg.notification,\n        destination = arg.destination;\n    notification.observe(destination);\n    this.unsubscribe();\n  };\n\n  ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n    var destination = this.destination;\n    destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n  };\n\n  ObserveOnSubscriber.prototype._next = function (value) {\n    this.scheduleMessage(Notification.createNext(value));\n  };\n\n  ObserveOnSubscriber.prototype._error = function (err) {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  };\n\n  ObserveOnSubscriber.prototype._complete = function () {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  };\n\n  return ObserveOnSubscriber;\n}(Subscriber);\n\nexport { ObserveOnSubscriber };\n\nvar ObserveOnMessage = /*@__PURE__*/function () {\n  function ObserveOnMessage(notification, destination) {\n    this.notification = notification;\n    this.destination = destination;\n  }\n\n  return ObserveOnMessage;\n}();\n\nexport { ObserveOnMessage };","map":{"version":3,"mappings":"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","names":["tslib_1","Subscriber","Notification","delay","ObserveOnOperator","scheduler","_super","destination","_this","dispatch","arg","notification","unsubscribe","ObserveOnSubscriber","schedule","value","scheduleMessage","createNext","_error","err","createComplete"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/operators/observeOn.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n * Ensure values in subscribe are called just before browser repaint.\n * ```ts\n * import { interval } from 'rxjs';\n * import { observeOn } from 'rxjs/operators';\n *\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  /** @nocollapse */\n  static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: SchedulerLike,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    const destination = this.destination as Subscription;\n    destination.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n"]},"metadata":{},"sourceType":"module"}