{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function schedulePromise(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    sub.add(scheduler.schedule(function () {\n      return input.then(function (value) {\n        sub.add(scheduler.schedule(function () {\n          subscriber.next(value);\n          sub.add(scheduler.schedule(function () {\n            return subscriber.complete();\n          }));\n        }));\n      }, function (err) {\n        sub.add(scheduler.schedule(function () {\n          return subscriber.error(err);\n        }));\n      });\n    }));\n    return sub;\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,SAAhC,EAA2C;EAC9C,OAAO,IAAIJ,UAAJ,CAAe,UAAUK,UAAV,EAAsB;IACxC,IAAIC,GAAG,GAAG,IAAIL,YAAJ,EAAV;IACAK,GAAG,CAACC,GAAJ,CAAQH,SAAS,CAACI,QAAV,CAAmB,YAAY;MACnC,OAAOL,KAAK,CAACM,IAAN,CAAW,UAAUC,KAAV,EAAiB;QAC/BJ,GAAG,CAACC,GAAJ,CAAQH,SAAS,CAACI,QAAV,CAAmB,YAAY;UACnCH,UAAU,CAACM,IAAX,CAAgBD,KAAhB;UACAJ,GAAG,CAACC,GAAJ,CAAQH,SAAS,CAACI,QAAV,CAAmB,YAAY;YAAE,OAAOH,UAAU,CAACO,QAAX,EAAP;UAA+B,CAAhE,CAAR;QACH,CAHO,CAAR;MAIH,CALM,EAKJ,UAAUC,GAAV,EAAe;QACdP,GAAG,CAACC,GAAJ,CAAQH,SAAS,CAACI,QAAV,CAAmB,YAAY;UAAE,OAAOH,UAAU,CAACS,KAAX,CAAiBD,GAAjB,CAAP;QAA+B,CAAhE,CAAR;MACH,CAPM,CAAP;IAQH,CATO,CAAR;IAUA,OAAOP,GAAP;EACH,CAbM,CAAP;AAcH","names":["Observable","Subscription","schedulePromise","input","scheduler","subscriber","sub","add","value","schedule","err"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/scheduled/schedulePromise.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    sub.add(scheduler.schedule(() => input.then(\n      value => {\n        sub.add(scheduler.schedule(() => {\n          subscriber.next(value);\n          sub.add(scheduler.schedule(() => subscriber.complete()));\n        }));\n      },\n      err => {\n        sub.add(scheduler.schedule(() => subscriber.error(err)));\n      }\n    )));\n    return sub;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}