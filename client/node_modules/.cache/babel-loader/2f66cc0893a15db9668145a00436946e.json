{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { Subscription } from './Subscription';\n\nvar AsyncSubject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AsyncSubject, _super);\n\n  function AsyncSubject() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.value = null;\n    _this.hasNext = false;\n    _this.hasCompleted = false;\n    return _this;\n  }\n\n  AsyncSubject.prototype._subscribe = function (subscriber) {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n\n    return _super.prototype._subscribe.call(this, subscriber);\n  };\n\n  AsyncSubject.prototype.next = function (value) {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  };\n\n  AsyncSubject.prototype.error = function (error) {\n    if (!this.hasCompleted) {\n      _super.prototype.error.call(this, error);\n    }\n  };\n\n  AsyncSubject.prototype.complete = function () {\n    this.hasCompleted = true;\n\n    if (this.hasNext) {\n      _super.prototype.next.call(this, this.value);\n    }\n\n    _super.prototype.complete.call(this);\n  };\n\n  return AsyncSubject;\n}(Subject);\n\nexport { AsyncSubject };","map":{"version":3,"mappings":"AAAA;AACA,OAAO,KAAKA,OAAZ,MAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,YAAT,QAA6B,gBAA7B;;AACA,IAAIC,YAAY,GAAG,aAAe,UAAUC,MAAV,EAAkB;EAChDJ,OAAO,CAACK,SAAR,CAAkBF,YAAlB,EAAgCC,MAAhC;;EACA,SAASD,YAAT,GAAwB;IACpB,IAAIG,KAAK,GAAGF,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACG,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;IACAF,KAAK,CAACG,KAAN,GAAc,IAAd;IACAH,KAAK,CAACI,OAAN,GAAgB,KAAhB;IACAJ,KAAK,CAACK,YAAN,GAAqB,KAArB;IACA,OAAOL,KAAP;EACH;;EACDH,YAAY,CAACS,SAAb,CAAuBC,UAAvB,GAAoC,UAAUC,UAAV,EAAsB;IACtD,IAAI,KAAKC,QAAT,EAAmB;MACfD,UAAU,CAACE,KAAX,CAAiB,KAAKC,WAAtB;MACA,OAAOf,YAAY,CAACgB,KAApB;IACH,CAHD,MAIK,IAAI,KAAKP,YAAL,IAAqB,KAAKD,OAA9B,EAAuC;MACxCI,UAAU,CAACK,IAAX,CAAgB,KAAKV,KAArB;MACAK,UAAU,CAACM,QAAX;MACA,OAAOlB,YAAY,CAACgB,KAApB;IACH;;IACD,OAAOd,MAAM,CAACQ,SAAP,CAAiBC,UAAjB,CAA4BQ,IAA5B,CAAiC,IAAjC,EAAuCP,UAAvC,CAAP;EACH,CAXD;;EAYAX,YAAY,CAACS,SAAb,CAAuBO,IAAvB,GAA8B,UAAUV,KAAV,EAAiB;IAC3C,IAAI,CAAC,KAAKE,YAAV,EAAwB;MACpB,KAAKF,KAAL,GAAaA,KAAb;MACA,KAAKC,OAAL,GAAe,IAAf;IACH;EACJ,CALD;;EAMAP,YAAY,CAACS,SAAb,CAAuBI,KAAvB,GAA+B,UAAUA,KAAV,EAAiB;IAC5C,IAAI,CAAC,KAAKL,YAAV,EAAwB;MACpBP,MAAM,CAACQ,SAAP,CAAiBI,KAAjB,CAAuBK,IAAvB,CAA4B,IAA5B,EAAkCL,KAAlC;IACH;EACJ,CAJD;;EAKAb,YAAY,CAACS,SAAb,CAAuBQ,QAAvB,GAAkC,YAAY;IAC1C,KAAKT,YAAL,GAAoB,IAApB;;IACA,IAAI,KAAKD,OAAT,EAAkB;MACdN,MAAM,CAACQ,SAAP,CAAiBO,IAAjB,CAAsBE,IAAtB,CAA2B,IAA3B,EAAiC,KAAKZ,KAAtC;IACH;;IACDL,MAAM,CAACQ,SAAP,CAAiBQ,QAAjB,CAA0BC,IAA1B,CAA+B,IAA/B;EACH,CAND;;EAOA,OAAOlB,YAAP;AACH,CAxCiC,CAwChCF,OAxCgC,CAAlC;;AAyCA,SAASE,YAAT","names":["tslib_1","Subject","AsyncSubject","_super","_this","prototype","_subscribe","subscriber","thrownError","hasCompleted","hasNext","next","value","error","complete"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/AsyncSubject.ts"],"sourcesContent":["import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}