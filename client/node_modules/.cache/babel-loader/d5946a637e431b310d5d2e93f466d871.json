{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    var iterator;\n    sub.add(function () {\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(function () {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n\n        var value;\n        var done;\n\n        try {\n          var result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAQ,IAAIC,eAArB,QAA4C,oBAA5C;AACA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,SAAjC,EAA4C;EAC/C,IAAI,CAACD,KAAL,EAAY;IACR,MAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;EACH;;EACD,OAAO,IAAIP,UAAJ,CAAe,UAAUQ,UAAV,EAAsB;IACxC,IAAIC,GAAG,GAAG,IAAIR,YAAJ,EAAV;IACA,IAAIC,QAAJ;IACAO,GAAG,CAACC,GAAJ,CAAQ,YAAY;MAChB,IAAIR,QAAQ,IAAI,OAAOA,QAAQ,CAACS,MAAhB,KAA2B,UAA3C,EAAuD;QACnDT,QAAQ,CAACS,MAAT;MACH;IACJ,CAJD;IAKAF,GAAG,CAACC,GAAJ,CAAQJ,SAAS,CAACM,QAAV,CAAmB,YAAY;MACnCV,QAAQ,GAAGG,KAAK,CAACF,eAAD,CAAL,EAAX;MACAM,GAAG,CAACC,GAAJ,CAAQJ,SAAS,CAACM,QAAV,CAAmB,YAAY;QACnC,IAAIJ,UAAU,CAACK,MAAf,EAAuB;UACnB;QACH;;QACD,IAAIC,KAAJ;QACA,IAAIC,IAAJ;;QACA,IAAI;UACA,IAAIC,MAAM,GAAGd,QAAQ,CAACe,IAAT,EAAb;UACAH,KAAK,GAAGE,MAAM,CAACF,KAAf;UACAC,IAAI,GAAGC,MAAM,CAACD,IAAd;QACH,CAJD,CAKA,OAAOG,GAAP,EAAY;UACRV,UAAU,CAACW,KAAX,CAAiBD,GAAjB;UACA;QACH;;QACD,IAAIH,IAAJ,EAAU;UACNP,UAAU,CAACY,QAAX;QACH,CAFD,MAGK;UACDZ,UAAU,CAACS,IAAX,CAAgBH,KAAhB;UACA,KAAKF,QAAL;QACH;MACJ,CAtBO,CAAR;IAuBH,CAzBO,CAAR;IA0BA,OAAOH,GAAP;EACH,CAnCM,CAAP;AAoCH","names":["Observable","Subscription","iterator","scheduleIterable","input","scheduler","subscriber","sub","add","Symbol_iterator","schedule","value","done","result","err"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    let iterator: Iterator<T>;\n    sub.add(() => {\n      // Finalize generators\n      if (iterator && typeof iterator.return === 'function') {\n        iterator.return();\n      }\n    });\n    sub.add(scheduler.schedule(() => {\n      iterator = input[Symbol_iterator]();\n      sub.add(scheduler.schedule(function () {\n        if (subscriber.closed) {\n          return;\n        }\n        let value: T;\n        let done: boolean;\n        try {\n          const result = iterator.next();\n          value = result.value;\n          done = result.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      }));\n    }));\n    return sub;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}