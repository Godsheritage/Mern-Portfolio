{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0];\n    } else {\n      return observables[0];\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator());\n}\n\nvar RaceOperator = /*@__PURE__*/function () {\n  function RaceOperator() {}\n\n  RaceOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  };\n\n  return RaceOperator;\n}();\n\nexport { RaceOperator };\n\nvar RaceSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RaceSubscriber, _super);\n\n  function RaceSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.hasFirst = false;\n    _this.observables = [];\n    _this.subscriptions = [];\n    return _this;\n  }\n\n  RaceSubscriber.prototype._next = function (observable) {\n    this.observables.push(observable);\n  };\n\n  RaceSubscriber.prototype._complete = function () {\n    var observables = this.observables;\n    var len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (var i = 0; i < len && !this.hasFirst; i++) {\n        var observable = observables[i];\n        var subscription = subscribeToResult(this, observable, undefined, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n\n        this.add(subscription);\n      }\n\n      this.observables = null;\n    }\n  };\n\n  RaceSubscriber.prototype.notifyNext = function (_outerValue, innerValue, outerIndex) {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (var i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          var subscription = this.subscriptions[i];\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  };\n\n  return RaceSubscriber;\n}(OuterSubscriber);\n\nexport { RaceSubscriber };","map":{"version":3,"mappings":"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","names":["tslib_1","isArray","fromArray","OuterSubscriber","subscribeToResult","_i","observables","length","RaceOperator","call","subscriber","source","RaceSubscriber","_super","destination","_this","_next","observable","_complete","len","i","hasFirst","subscription","subscriptions","notifyNext","outerIndex"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/observable/race.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic, ObservableInput } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n// tslint:disable:max-line-length\nexport function race<A>(arg: [ObservableInput<A>]): Observable<A>;\nexport function race<A, B>(arg: [ObservableInput<A>, ObservableInput<B>]): Observable<A | B>;\nexport function race<A, B, C>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<A | B | C>;\nexport function race<A, B, C, D>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<A | B | C | D>;\nexport function race<A, B, C, D, E>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<A | B | C | D | E>;\nexport function race<T>(arg: ObservableInput<T>[]): Observable<T>;\nexport function race(arg: ObservableInput<any>[]): Observable<{}>;\n\nexport function race<A>(a: ObservableInput<A>): Observable<A>;\nexport function race<A, B>(a: ObservableInput<A>, b: ObservableInput<B>): Observable<A | B>;\nexport function race<A, B, C>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>): Observable<A | B | C>;\nexport function race<A, B, C, D>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>): Observable<A | B | C | D>;\nexport function race<A, B, C, D, E>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>, e: ObservableInput<E>): Observable<A | B | C | D | E>;\n// tslint:enable:max-line-length\n\nexport function race<T>(observables: ObservableInput<T>[]): Observable<T>;\nexport function race(observables: ObservableInput<any>[]): Observable<{}>;\nexport function race<T>(...observables: ObservableInput<T>[]): Observable<T>;\nexport function race(...observables: ObservableInput<any>[]): Observable<{}>;\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```ts\n * import { race, interval } from 'rxjs';\n * import { mapTo } from 'rxjs/operators';\n *\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // result:\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(...observables: ObservableInput<any>[]): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0] as Observable<any>[];\n    } else {\n      return observables[0] as Observable<T>;\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete!();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        const observable = observables[i];\n        const subscription = subscribeToResult(this, observable, undefined, i)!;\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null!;\n    }\n  }\n\n  notifyNext(_outerValue: T, innerValue: T,\n             outerIndex: number): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null!;\n    }\n\n    this.destination.next!(innerValue);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}