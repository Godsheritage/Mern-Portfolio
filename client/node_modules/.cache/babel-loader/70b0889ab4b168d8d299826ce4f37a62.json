{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\n\nvar MergeMapOperator = /*@__PURE__*/function () {\n  function MergeMapOperator(project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n  };\n\n  return MergeMapOperator;\n}();\n\nexport { MergeMapOperator };\n\nvar MergeMapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MergeMapSubscriber, _super);\n\n  function MergeMapSubscriber(destination, project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.active++;\n\n    this._innerSub(result);\n  };\n\n  MergeMapSubscriber.prototype._innerSub = function (ish) {\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = innerSubscribe(ish, innerSubscriber);\n\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  };\n\n  MergeMapSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n\n  MergeMapSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n\n  return MergeMapSubscriber;\n}(SimpleOuterSubscriber);\n\nexport { MergeMapSubscriber };\nexport var flatMap = mergeMap;","map":{"version":3,"mappings":"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","names":["tslib_1","map","from","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","concurrent","resultSelector","source","MergeMapOperator","_super","MergeMapSubscriber","destination","project","Number","_this","_next","value","push","_tryNext","result","index","error","err","active","_innerSub","innerSubscriber","innerSubscription","hasCompleted","unsubscribe","prototype","notifyNext","notifyComplete","buffer"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/operators/mergeMap.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { mergeMap, map } from 'rxjs/operators';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and merging the results of the Observables\n * obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b: any, ii: number) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error!(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result);\n  }\n\n  private _innerSub(ish: ObservableInput<R>): void {\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    const innerSubscription = innerSubscribe(ish, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete!();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(innerValue: R): void {\n    this.destination.next!(innerValue);\n  }\n\n  notifyComplete(): void {\n    const buffer = this.buffer;\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift()!);\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete!();\n    }\n  }\n}\n\n/**\n * @deprecated renamed. Use {@link mergeMap}\n */\nexport const flatMap = mergeMap;"]},"metadata":{},"sourceType":"module"}