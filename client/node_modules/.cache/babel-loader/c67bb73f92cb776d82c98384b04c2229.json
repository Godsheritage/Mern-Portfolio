{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\nvar ConnectableObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ConnectableObservable, _super);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._refCount = 0;\n    _this._isComplete = false;\n    return _this;\n  }\n\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  };\n\n  ConnectableObservable.prototype.connect = function () {\n    var connection = this._connection;\n\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n\n    return connection;\n  };\n\n  ConnectableObservable.prototype.refCount = function () {\n    return higherOrderRefCount()(this);\n  };\n\n  return ConnectableObservable;\n}(Observable);\n\nexport { ConnectableObservable };\nexport var connectableObservableDescriptor = /*@__PURE__*/function () {\n  var connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n}();\n\nvar ConnectableSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ConnectableSubscriber, _super);\n\n  function ConnectableSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.connectable = connectable;\n    return _this;\n  }\n\n  ConnectableSubscriber.prototype._error = function (err) {\n    this._unsubscribe();\n\n    _super.prototype._error.call(this, err);\n  };\n\n  ConnectableSubscriber.prototype._complete = function () {\n    this.connectable._isComplete = true;\n\n    this._unsubscribe();\n\n    _super.prototype._complete.call(this);\n  };\n\n  ConnectableSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (connectable) {\n      this.connectable = null;\n      var connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  };\n\n  return ConnectableSubscriber;\n}(SubjectSubscriber);\n\nvar RefCountOperator = /*@__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n\n    return subscription;\n  };\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RefCountSubscriber, _super);\n\n  function RefCountSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.connectable = connectable;\n    return _this;\n  }\n\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    var refCount = connectable._refCount;\n\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    connectable._refCount = refCount - 1;\n\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":"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","names":["tslib_1","SubjectSubscriber","Observable","Subscriber","Subscription","ConnectableObservable","_super","source","subjectFactory","_this","_subscribe","subscriber","prototype","getSubject","subject","_subject","isStopped","connect","connection","_connection","subscribe","refCount","connectableObservableDescriptor","operator","value","_refCount","writable","connectableProto","_isComplete","ConnectableSubscriber","destination","connectable","_error","_complete","_unsubscribe","RefCountOperator","refCounter","RefCountSubscriber","subscription","sharedConnection"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/observable/ConnectableObservable.ts"],"sourcesContent":["import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = (() => {\n  const connectableProto = <any>ConnectableObservable.prototype;\n  return {\n    operator: { value: null as null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null as null, writable: true },\n    _connection: { value: null as null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n  };\n})();\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // ).subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}