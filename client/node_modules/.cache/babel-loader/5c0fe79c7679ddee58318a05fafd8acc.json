{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\nvar SubjectSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SubjectSubscriber, _super);\n\n  function SubjectSubscriber(destination) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.destination = destination;\n    return _this;\n  }\n\n  return SubjectSubscriber;\n}(Subscriber);\n\nexport { SubjectSubscriber };\n\nvar Subject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(Subject, _super);\n\n  function Subject() {\n    var _this = _super.call(this) || this;\n\n    _this.observers = [];\n    _this.closed = false;\n    _this.isStopped = false;\n    _this.hasError = false;\n    _this.thrownError = null;\n    return _this;\n  }\n\n  Subject.prototype[rxSubscriberSymbol] = function () {\n    return new SubjectSubscriber(this);\n  };\n\n  Subject.prototype.lift = function (operator) {\n    var subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  };\n\n  Subject.prototype.next = function (value) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    if (!this.isStopped) {\n      var observers = this.observers;\n      var len = observers.length;\n      var copy = observers.slice();\n\n      for (var i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  };\n\n  Subject.prototype.error = function (err) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    var observers = this.observers;\n    var len = observers.length;\n    var copy = observers.slice();\n\n    for (var i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n\n    this.observers.length = 0;\n  };\n\n  Subject.prototype.complete = function () {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n\n    this.isStopped = true;\n    var observers = this.observers;\n    var len = observers.length;\n    var copy = observers.slice();\n\n    for (var i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n\n    this.observers.length = 0;\n  };\n\n  Subject.prototype.unsubscribe = function () {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  };\n\n  Subject.prototype._trySubscribe = function (subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return _super.prototype._trySubscribe.call(this, subscriber);\n    }\n  };\n\n  Subject.prototype._subscribe = function (subscriber) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  };\n\n  Subject.prototype.asObservable = function () {\n    var observable = new Observable();\n    observable.source = this;\n    return observable;\n  };\n\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n\n  return Subject;\n}(Observable);\n\nexport { Subject };\n\nvar AnonymousSubject = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(AnonymousSubject, _super);\n\n  function AnonymousSubject(destination, source) {\n    var _this = _super.call(this) || this;\n\n    _this.destination = destination;\n    _this.source = source;\n    return _this;\n  }\n\n  AnonymousSubject.prototype.next = function (value) {\n    var destination = this.destination;\n\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  };\n\n  AnonymousSubject.prototype.error = function (err) {\n    var destination = this.destination;\n\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  };\n\n  AnonymousSubject.prototype.complete = function () {\n    var destination = this.destination;\n\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  };\n\n  AnonymousSubject.prototype._subscribe = function (subscriber) {\n    var source = this.source;\n\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  };\n\n  return AnonymousSubject;\n}(Subject);\n\nexport { AnonymousSubject };","map":{"version":3,"mappings":"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","names":["tslib_1","Observable","Subscriber","Subscription","ObjectUnsubscribedError","SubjectSubscription","SubjectSubscriber","_super","destination","Subject","_this","rxSubscriberSymbol","prototype","lift","AnonymousSubject","subject","operator","next","observers","len","length","i","copy","error","hasError","thrownError","err","complete","unsubscribe","isStopped","closed","_trySubscribe","_subscribe","subscriber","push","asObservable","observable","source","value"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/Subject.ts"],"sourcesContent":["import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse\n   * @deprecated use new Subject() instead\n  */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}