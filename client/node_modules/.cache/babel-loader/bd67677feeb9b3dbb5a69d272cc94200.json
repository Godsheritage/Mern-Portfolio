{"ast":null,"code":"/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nexport var NotificationKind;\n/*@__PURE__*/\n\n(function (NotificationKind) {\n  NotificationKind[\"NEXT\"] = \"N\";\n  NotificationKind[\"ERROR\"] = \"E\";\n  NotificationKind[\"COMPLETE\"] = \"C\";\n})(NotificationKind || (NotificationKind = {}));\n\nvar Notification = /*@__PURE__*/function () {\n  function Notification(kind, value, error) {\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n\n  Notification.prototype.observe = function (observer) {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n\n      case 'E':\n        return observer.error && observer.error(this.error);\n\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  };\n\n  Notification.prototype.do = function (next, error, complete) {\n    var kind = this.kind;\n\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n\n      case 'E':\n        return error && error(this.error);\n\n      case 'C':\n        return complete && complete();\n    }\n  };\n\n  Notification.prototype.accept = function (nextOrObserver, error, complete) {\n    if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n      return this.observe(nextOrObserver);\n    } else {\n      return this.do(nextOrObserver, error, complete);\n    }\n  };\n\n  Notification.prototype.toObservable = function () {\n    var kind = this.kind;\n\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n\n      case 'E':\n        return throwError(this.error);\n\n      case 'C':\n        return empty();\n    }\n\n    throw new Error('unexpected notification kind value');\n  };\n\n  Notification.createNext = function (value) {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n\n    return Notification.undefinedValueNotification;\n  };\n\n  Notification.createError = function (err) {\n    return new Notification('E', undefined, err);\n  };\n\n  Notification.createComplete = function () {\n    return Notification.completeNotification;\n  };\n\n  Notification.completeNotification = new Notification('C');\n  Notification.undefinedValueNotification = new Notification('N', undefined);\n  return Notification;\n}();\n\nexport { Notification };","map":{"version":3,"mappings":"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","names":["empty","of","NotificationKind","Notification","kind","error","observe","observer","do","next","accept","nextOrObserver","complete","toObservable","throwError","value","err"],"sources":["/Users/godsheritageadeoye/Documents/GitHub/Mern-Portfolio/client/node_modules/rxjs/src/internal/Notification.ts"],"sourcesContent":["import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { deprecate } from 'util';\n\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\n/**\n * @deprecated NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead.\n */\nexport enum NotificationKind {\n  NEXT = 'N',\n  ERROR = 'E',\n  COMPLETE = 'C',\n}\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: 'N' | 'E' | 'C', public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}